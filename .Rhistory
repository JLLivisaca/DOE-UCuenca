hmctest(datos$Line~ modelo.1$residual)
hmctest(datos$Line ~ modelo.1$residuals)
hmctest(modelo.1$residuals~ datos$Line)
plot(modelo.1)
regresion <-  lm(datos$Fecundity ~ datos$Line)
summary(regresion)
plot((datos$Fecundity ~ datos$Line)
plot(datos$Fecundity ~ datos$Line)
plot(datos$Fecundity ~ datos$Line)
plotdot(datos$Fecundity ~ datos$Line)
line(datos$Fecundity ~ datos$Line)
regresion <-  lm(modelo.1$residuals ~ datos$Line)
summary(regresion)
plot(modelo.1)
f <- factor(rep(c(35,40,45),each=4))
fac <- sample(f,12)
eu <- 1:12
plan <- data.frame(loaf=eu, time=fac)
y <- factor(rep(c(30,20,10), each=4))
h <- 1:20
muestra <- sample(y,10)
datos <- data.frame(tiempo=muestra, lote=h)
datos <- datos[order(datos$tiempo),]
View(datos)
??pairw.anova
?reset
#según la grafica no hay patrones, o se puede suponer eso
#para hacer test de linealidad se requiere instalar el paquete lmtest
library(lmtest)
?reset
modelo.1 <-  aov(datos$Fecundity ~ datos$Line)
library(PASWR)
datos <-  Drosophila
??Drosophila
# Anova
# Ho: Media de la fecundidad de los huevos puestos en el grupo de resistant es igual a la media de la fecundidad de los huevos puestos por el grupo Susceptible y es igual a Media de la fecundidad de los huevos puestos en el grupo de Noselected
#Ha : al menos una media es diferente
# alfa = 0.05
# Estadístico de prueba
# F
modelo.1 <-  aov(datos$Fecundity ~ datos$Line)
summary(modelo.1)
# F = 8.666
# Decisión
# P valor
# 0.000424
# Comparo el p valor con el alfa
# Rechazo Ho
oneway.plots(datos$Fecundity, datos$Line)
# Prueba de Ramsey
library(lmtest)
reset(modelo.1)
reset(modelo.1$residuals)
modelo.1 <-  modelo.1$residuals
library(PASWR)
datos <-  Drosophila
??Drosophila
# Anova
# Ho: Media de la fecundidad de los huevos puestos en el grupo de resistant es igual a la media de la fecundidad de los huevos puestos por el grupo Susceptible y es igual a Media de la fecundidad de los huevos puestos en el grupo de Noselected
#Ha : al menos una media es diferente
# alfa = 0.05
# Estadístico de prueba
# F
modelo.1 <-  aov(datos$Fecundity ~ datos$Line)
summary(modelo.1)
# F = 8.666
# Decisión
# P valor
# 0.000424
# Comparo el p valor con el alfa
# Rechazo Ho
oneway.plots(datos$Fecundity, datos$Line)
# Prueba de Ramsey
library(lmtest)
residuos <-  modelo.1$residuals
reset(residuos)
reset(modelo.1)
library(PASWR)
datos <-  Drosophila
??Drosophila
# Anova
# Ho: Media de la fecundidad de los huevos puestos en el grupo de resistant es igual a la media de la fecundidad de los huevos puestos por el grupo Susceptible y es igual a Media de la fecundidad de los huevos puestos en el grupo de Noselected
#Ha : al menos una media es diferente
# alfa = 0.05
# Estadístico de prueba
# F
modelo.1 <-  aov(datos$Fecundity ~ datos$Line)
summary(modelo.1)
# F = 8.666
# Decisión
# P valor
# 0.000424
# Comparo el p valor con el alfa
# Rechazo Ho
oneway.plots(datos$Fecundity, datos$Line)
library(asbio)
??pairw.anova
# Ingreso datos
library(readr)
Maquinas <- read_csv("GitHub/estadistica-inferencia/DOE-UCuenca/Base Flexim.csv")
library(Rcmdr)
# Ingreso datos
library(readr)
Base_Flexim <- read_csv("Base Flexim.csv")
maquina <- read_csv("Base Flexim.csv")
View(maquina)
summary(maquina$s)
# Anova
maquina$s <-  maquina$s/1000000
View(maquina)
# Anova
maquina$s <-  maquina$s*1000000
modelo.maquin <-  aov(maquina$s ~ maquina$Maquina)
summary(modelo.maquin)
summary(maquina$s)
attach(maquina)
modelo.maquin <-  aov(s ~ Maquina)
summary(modelo.maquin)
library(nortest)
lillie.test(modelo.maquin$residuals)
maquina <-  maquina[order(maquina$Maquina),]
maquina$Tiempo_transformado <-  sqrt(maquina$s)
modelo.maquin <-  aov(s ~ Maquina)
summary(modelo.maquin)
modelo.maquin <-  aov(maquina$Tiempo_transformado ~ Maquina)
summary(modelo.maquin)
lillie.test(modelo.maquin$residuals)
library(bibliometrix)
peso <- c(15.16,28.99,16.95,29.61,34.61,20.69,17.39,29.94,22.79,30.86,14.00,
38.72,23.29,17.00,35.40,19.32,29.88)
# g= tilapias Gregori; s=tilapias Santafe
especie <- c('s',rep('g',8),rep('s',8))
# Prueba gráfica de homogeneidad e igualdad de medias #
boxplot(peso ~ especie)
# Gráfico de normalidad #
qqnorm(peso)
qqline(peso)
qqnorm(peso)
qqline(peso)
# Prueba parámetrica de normalidad #
shapiro.test(peso)
# Prueba de igualdad de medias #
t.test(peso~especie,var.equal=T,alternative="greater")
###############
# Ejemplo 2.2 #
###############
# ¿Se puede suponer que las varianzas son +/- iguales? #
var.test(peso~ especie=='g')
#Prueba T multivariada
###############
# Ejemplo 2.7 #
###############
# Lectura de datos #
agente.osmo <- c(rep('SC',6),rep('SS',6)) # SC = Sacarosa Cristalina,
#SS = Sal Sólida
brix <- c(17.0,17.5,17.2,21.0,20.5,20.7,30.0,29.0,29.5,31.0,31.0,30.0)
PH <- c(5.05,5.07,5.02,5.15,5.17,5.12,4.21,4.24,4.18,4.13,4.16,4.18)
osmo <- as.data.frame(agente.osmo)
osmo$brix <- brix
osmo$PH <- PH
# Prueba T^2 de Hotelling #
library(Hotelling)
install.packages("Hotelling")
install.packages("corpcor")
# Prueba T^2 de Hotelling #
library(Hotelling)
library(corpcor)
split.data <- split(osmo[,-1],osmo$agente.osmo)
x <- split.data[[1]]
y <- split.data[[2]]
S <- 1/10*(5*cov(x) + 5*cov(y))
S <- (5*cov(x) + 5*cov(y))
T.1 <- 36/12*cbind(mean(x$brix)-mean(y$brix),mean(x$PH)-mean(y$PH))
%*%solve(S)%*%rbind(mean(x$brix)-mean(y$brix),mean(x$PH)-mean(y$PH))
T.1 <- 36/12*cbind(mean(x$brix)-mean(y$brix),mean(x$PH)-mean(y$PH))
%*%solve(S)%*%rbind(mean(x$brix)-mean(y$brix),mean(x$PH)-mean(y$PH))
T.1
ST <- hotelling.stat(x, y)
ST
T.1 <- 36/12*cbind(mean(x$brix)-mean(y$brix),mean(x$PH)-mean(y$PH))%*%solve(S)%*%rbind(mean(x$brix)-mean(y$brix),mean(x$PH)-mean(y$PH))
T.1
ST <- hotelling.stat(x, y)
ST
fit <- hotelling.test(brix+PH ~ agente.osmo, data=osmo)
fit
kruskal.testpeso~ especie=='g')
kruskal.test(peso~ especie=='g')
pairwise.wilcox.test(x = datos$n_huevos, g = datos$condicion, p.adjust.method = "holm" )
pairwise.wilcox.test(x = peso, g = especie, p.adjust.method = "holm" )
library(pwr) # pwr.anova.test
install.packages("pwr")
library(pwr) # pwr.anova.test, instalar paquete si no se tiene
# k: número de tratamientos, n: número de replicas, f=phi/sqrt(n)
# con esta función se averigua la potencia para un k y un n dados
pwr.anova.test(k=4,n=5,f=2/sqrt(5),sig.level=0.05)
# con esta función se averigua el n para una potencia dada
pwr.anova.test(f=2/sqrt(5),k=4,power=0.80,sig.level=0.05)
phi <- seq(0, 4, 0.01)
pot <- pwr.anova.test(k = 4, n = 5, f = phi/sqrt(5), sig.level = 0.05,
power = NULL)$power
beta=1-pot
phi <- seq(0, 4, 0.01)
pot <- pwr.anova.test(k = 4, n = 5, f = phi/sqrt(5), sig.level = 0.05, power = NULL)$power
beta=1-pot
plot(phi,beta,type='l')
abline(v=2,lty=2)
# Se encuentra f y después phi
pwr.anova.test(k=4,n=15,power=0.80,sig.level=0.05)
phi <- 0.4414577*sqrt(15)
phi
# phi^2=0.1086r
r <- phi^2/0.1086
pwr.anova.test(k=4,n=round(r),f=sqrt(0.1086),sig.level=0.05) # r=27
pwr.anova.test(k=4,f=sqrt(0.1086),power=0.80,sig.level=0.05) # r=27
# Delta*=0.75, 1.0, 1.25, phi=Delta*^2*r/(2t)
phi1 <- c(0.75,1,1.25)/sqrt(2*4)
# 1-beta=0.70
pwr.anova.test(k=4,f=phi1[1],power=0.7,sig.level=0.05)
pwr.anova.test(k=4,f=phi1[2],power=0.7,sig.level=0.05)
pwr.anova.test(k=4,f=phi1[3],power=0.7,sig.level=0.05)
# 1-beta=0.80
pwr.anova.test(k=4,f=phi1[1],power=0.8,sig.level=0.05)
pwr.anova.test(k=4,f=phi1[2],power=0.8,sig.level=0.05)
pwr.anova.test(k=4,f=phi1[3],power=0.8,sig.level=0.05)
# 1-beta=0.90
pwr.anova.test(k=4,f=phi1[1],power=0.9,sig.level=0.05)
pwr.anova.test(k=4,f=phi1[2],power=0.9,sig.level=0.05)
pwr.anova.test(k=4,f=phi1[3],power=0.9,sig.level=0.05)
binomial.funcion <- function(x,n,p){
choose(n,x)*((p)^x)*(1-p)^n-x
}
binomial.funcion(5,8,0.4)
dbinom(5,8,0.4)
x=0:8
dbinom(x,8,0.4)
y=dbinom(x,8,0.4)
plot(y)
plot(y, col="blue")
cumsum(1:10)
cumsum(y)
dbinom(5,8,0.4)
h=(1,4)
pbinom(h,25,0.05)
y=pbinom(h,25,0.05)
h=(1,4)
h=c(1,4)
y=pbinom(h,25,0.05)
y[2]-y[1]
x=0:25
dbinom(x,25,0.05)
x=0:25
g=dbinom(x,25,0.05)
table(x,g)
h=data.frame(x,g)
h
h[5]-h[1}
h[5]-h[1]
h
h[5]-h[1]
h[5,2]-h[1,2]
h[1,2]-h[5,2]
h=c(0,4)
y=pbinom(h,25,0.05)
y[2]-y[1]
x=0:25
dbinom(x,25,0.05)
i=dbinom(x,25,0.05)
k=cumsum(i)
(k=cumsum(i))
k[6]-k[1]
k[5]-k[1]
library(Rcmdr)
library(Rcmdr)
# Práctica DBCA
library(readxl)
# Práctica DBCA
library(readxl)
Operador <- read_excel("Operador.xlsx")
Operador <- read_excel("Operador.xlsx")
# Convertir los valores del operador a factores
Operador <- within(Operador, {
Operador <- factor(Operador, labels=c('Ope_1','Ope_2','Ope_3','Ope_4'))
})
# Modelo DBCA
AnovaModel.1 <- (aov(Tiempo ~ Metodo+Operador, data=Operador))
Anova(AnovaModel.1)
TukeyHSD(AnovaModel.1)
old.oma <- par(oma=c(0,5,0,0))
.Pairs <- glht(AnovaModel.1, linfct = mcp(Metodo = "Tukey"))
plot(confint(.Pairs))
Operador <- read_excel("Operador.xlsx")
# Convertir los valores del operador a factores
Operador <- within(Operador, {
Operador <- factor(Operador, labels=c('Ope_1','Ope_2','Ope_3','Ope_4'))
})
# Modelo DBCA
AnovaModel.1 <- (aov(Tiempo ~ Metodo+Operador, data=Operador))
Anova(AnovaModel.1)
TukeyHSD(AnovaModel.1)
old.oma <- par(oma=c(0,5,0,0))
old.oma <- par(oma=c(0,5,0,0))
.Pairs <- glht(AnovaModel.1, linfct = mcp(Metodo = "Tukey"))
Operador <- within(Operador, {
Operador <- factor(Operador, labels=c('Ope_1','Ope_2','Ope_3','Ope_4'))
})
Metodo <- within(Metodo, {
Metodo <- factor(Metodo, labels=c('A','B','C','D'))
})
# Práctica DBCA
library(readxl)
Operador <- read_excel("Operador.xlsx")
# Convertir los valores del operador a factores
Operador <- within(Operador, {
Operador <- factor(Operador, labels=c('Ope_1','Ope_2','Ope_3','Ope_4'))
})
Metodo <- within(Metodo, {
Metodo <- factor(Metodo, labels=c('A','B','C','D'))
})
Metodo <- within(Metodo, {
Metodo <- factor(Metodo, labels=c('A','B','C','D'))
})
Metodo <- as.factor(Metodo)
Metodo <- as.factor(Metodo)
Metodo <- as.factor(Operador$Metodo)
Metodo <- as.factor(Operador$Metodo)
# Modelo DBCA
AnovaModel.1 <- (aov(Tiempo ~ Metodo+Operador, data=Operador))
Anova(AnovaModel.1)
TukeyHSD(AnovaModel.1)
old.oma <- par(oma=c(0,5,0,0))
.Pairs <- glht(AnovaModel.1, linfct = mcp(Metodo = "Tukey"))
confint(.Pairs) # confidence intervals
mtext('Metodo')
plot(confint(.Pairs))
.Pairs <- glht(AnovaModel.1, linfct = mcp(Operador = "Tukey"))
confint(.Pairs) # confidence intervals
plot(confint(.Pairs))
par(old.oma)
remove(.Pairs)
dbinom(2,10,.3)
dbinom(5,10,.3)-dbinom(2,10,.3)
dbinom(5,10,.3)
-dbinom(5,10,.3)+dbinom(2,10,.3)
pbinom(5,5,.3)
dbinom(1,10,3)
dbinom(1,10,.3)
dbinom(1,10,.3)
1-dbinom(4,20,0.1)
1-dbinom(x=0:4,20,0.1)
1-dbinom(x=0:4,20,0.1)
dbinom(x=0:4,20,0.1)
1-cumsum(dbinom(x=0:4,20,0.1))
1-cumsum(dbinom(x=0:4,20,0.1))
cumsum(dbinom(x=0:4,20,0.1))
pbinom(4,20,.1)
pbinom(4,30,.1)
pbinom(4,20,.1)
dbinom(4,20,.1)
dbinom(4,16,.1)
1-dbinom(4,16,.1)
pbinom(4,20,.1)
pbinom(2,15,.3)
pbinom(5,15,.3)
-pbinom(2,15,.3)+pbinom(5,15,.3)
1-dbinom(1,10,.3)
1-pbinom(1,10,.3)
dbinom(3,8,.6)
-pbinom(2,15,.3)+pbinom(5,15,.3)`
pbinom(5,7,.6) - pbinom(2,7,.6)
pbinom(5,7,.6) - pbinom(2,7,.6)
dbinomNegativa.propia <- function(x,
k,
p){
choose(x-1,k-1)*(p^k)*((1-p)^(x-k))
}
dbinomNegativa.propia(5,3,0.3)
pbinom(5,15,0.3) - pbinom(2,15,0.3)
pbinom(5,15,0.3)
dbinom(5,15,0.3)
# P(x<=3) X tiende a una binomial (10,0.2)
pbinom(3,10,0.2)
pbinom(6,15,0.3) - pbinom(2,15,0.3)
x= c(2,6)
h = pbinom(x,10,0.2)
h
h[2] - h[1]
x= c(2,6)
h = pbinom(x,15,0.2)
h[2] - h[1]
# P(X>=6) = 1- P(X<6) = 1 - P(X<=5)
1-pbinom(5,10,0.6)
#Literal b
# Valor medio
Ex = 10*0.6
#Literal b
# Valor medio
(Ex = 10*0.6)
# Varianza
(var.x= 10*0.6*0.4)
# desv. estándar
desv.x = sqrt(var.x)
# desv. estándar
(desv.x = sqrt(var.x))
Ex - desv.x
Ex + desv.x
# P(4.45 <= X <= 7.55)
# P(5 <= X <= 7) = F(7) - F(4)
pbinom(7,10,0.6) - pbinom(4,10,0.6)
# P(4.45 <= X <= 7.55)
# P(5 <= X <= 7) = F(7) - F(4)
-pbinom(7,10,0.6) - pbinom(4,10,0.6)
# P(4.45 <= X <= 7.55)
# P(5 <= X <= 7) = F(7) - F(4)
pbinom(7,10,0.6) + pbinom(4,10,0.6)
# P(4.45 <= X <= 7.55)
# P(5 <= X <= 7) = F(7) - F(4)
pbinom(7,10,0.6) + pbinom(6,10,0.6)
# P(4.45 <= X <= 7.55)
# P(5 <= X <= 7) = F(7) - F(4)
pbinom(7,10,0.6) - pbinom(4,10,0.6)
pbinom(7,7,0.5)
pbinom(7,10,0.5)
dnbinom(x=5, size=10, prob=0.5)
dnbinom(x=5, size=15, prob=0.5)
dnbinom(x=5, size=10, prob=0.2)
dnbinom(x=5, size=15, prob=0.2)
dnbinom(x=15, size=5, prob=0.2)
dnbinom(x=10, size=5, prob=0.2)
dhyper(15,5,6)
dhyper(15,2,6)
m <- 2; n <- 3; k <- 5 # m es el número de éxitos, n es el número de fracasos , y k es la muestra aleatoria tomada
x <- 0:(k)
dhyper(x, m, n, k)
m <- 2; n <- 3; k <- 15 # m es el número de éxitos, n es el número de fracasos , y k es la muestra aleatoria tomada
x <- 0:(k)
dhyper(x, m, n, k)
m <- 2; n <- 6; k <- 15 # m es el número de éxitos, n es el número de fracasos , y k es la muestra aleatoria tomada
x <- 0:(k)
dhyper(x, m, n, k)
m <- 4; n <- 5; k <- 3 # m es el número de éxitos, n es el número de fracasos , y k es la muestra aleatoria tomada
x <- 0:(2)
dhyper(x, m, n, k)
x <- 0:(7)
dhyper(x, m, n, k)
m <- 4; n <- 5; k <- 3 # m es el número de éxitos, n es el número de fracasos , y k es la muestra aleatoria tomada
m <- 4; n <- 5; k <- 3 # m es el número de éxitos, n es el número de fracasos , y k es la muestra aleatoria tomada
x <- 0:(4) # es el valor de la probabilidad que me piden dentro del problema
dhyper(x, m, n, k)
# probabilidad no más de una defectuosa
phyper(0, m, n, k)
# probabilidad no más de una defectuosa
phyper(0, m, n, k)
#xeles o una versión de 4 megapixeles. Una tienda de cáma-
#ras recibió un envío de 15 de estas cámaras, de las cuales 6
#tienen una resolución de 3 megapixeles. Suponga que se
#seleccionan al azar 5 de estas cámaras para guardarlas detrás
#del mostrador; las otras 10 se colocan en una bodega. Sea
#X  el número de cámaras de 3 megapixeles entre las 5 se-
#leccionadas para guardarlas detrás del mostrador.
# a. ¿Qué distribución tiene X (nombre y valores de todos los
# parámetros)?
# b.Calcule P(X= 2), P(X <= 2) y P(X  >= 2).
m <- 6; n <- 9; k <- 5 # m es el número de éxitos, n es el número de fracasos , y k es la muestra aleatoria tomada
x <- 0:(5) # es el valor de la probabilidad que me piden dentro del problema
dhyper(x, m, n, k)
x <- 0:(6) # es el valor de la probabilidad que me piden dentro del problema
dhyper(x, m, n, k)
# probabilidad no más de una defectuosa
phyper(0, m, n, k)
# probabilidad no más de una defectuosa
phyper(2, m, n, k)
# probabilidad no más de una defectuosa
phyper(2, m, n, k, lower.tail = F)
# probabilidad no más de una defectuosa
phyper(2, m, n, k, lower.tail = T)
# Ejercicio 82 pp: 125
#Considere escribir en un disco de computadora y luego enviar-
# lo a través de un certificador que cuenta el número de pulsos
#faltantes. Suponga que este número X tiene una distribución
#de Poisson con parámetro   0.2. (Sugerido en “Average
#                                  Sample Number for Semi-Curtailed Sampling Using the Pois-
#                                   son Distribution”, J. Quality Technology, 1983: 126–129.)
#a. ¿Cuál es la probabilidad de que un disco tenga exacta-
# mente un pulso faltante?
dpois(1,0.2)
#b. ¿Cuál es la probabilidad de que un disco tenga por lo me-
#nos dos pulsos faltantes?
1- ppois(1,0.2)
ppois(0,0.2)
ppois(0,0.2)
dhyper()
POLVO_DE_HORNEAR_ANOVA <- read_excel("GitHub/estadistica-inferencia/DOE-UCuenca/POLVO DE HORNEAR - ANOVA.xlsx"
library(readxl)
POLVO_DE_HORNEAR_ANOVA <- read_excel("GitHub/estadistica-inferencia/DOE-UCuenca/POLVO DE HORNEAR - ANOVA.xlsx"
library(readxl)
POLVO_DE_HORNEAR_ANOVA <- read_excel("GitHub/estadistica-inferencia/DOE-UCuenca/POLVO DE HORNEAR - ANOVA.xlsx")
setwd("~/GitHub/estadistica-inferencia/DOE-UCuenca")
library(readxl)
POLVO_DE_HORNEAR_ANOVA <- read_excel("GitHub/estadistica-inferencia/DOE-UCuenca/POLVO DE HORNEAR - ANOVA.xlsx")
library(readxl)
POLVO_DE_HORNEAR_ANOVA <- read_excel("GitHub/estadistica-inferencia/DOE-UCuenca/POLVO DE HORNEAR - ANOVA.xlsx")
library(readxl)
POLVO_DE_HORNEAR_ANOVA <- read_excel("POLVO DE HORNEAR - ANOVA.xlsx")
View(POLVO_DE_HORNEAR_ANOVA)
library(Rcmdr)
# Literal c
modelo.lineal= lm(Incremento ~ Cucharidatas, data=POLVO_DE_HORNEAR_ANOVA)
summary(modelo.lineal)
qqplot(POLVO_DE_HORNEAR_ANOVA$rstudent.AnovaModel.1, POLVO_DE_HORNEAR_ANOVA$fitted.AnovaModel.1)
qqplot(POLVO_DE_HORNEAR_ANOVA$rstudent.AnovaModel.1, POLVO_DE_HORNEAR_ANOVA$fitted.AnovaModel.1)
qqplot(POLVO_DE_HORNEAR_ANOVA$rstudent.AnovaModel.1, POLVO_DE_HORNEAR_ANOVA$fitted.AnovaModel.1)
qqline(POLVO_DE_HORNEAR_ANOVA$fitted.AnovaModel.1)
